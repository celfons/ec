package br.com.vr.domains;

import br.com.vr.domains.commands.ExtractPurchaseCardCommand;
import br.com.vr.domains.commands.UnlockPurchaseCardCommand;
import br.com.vr.domains.events.CreatedPurchaseCardEvent;
import br.com.vr.domains.events.UnlockedCardEvent;
import br.com.vr.domains.services.KenanService;
import br.com.vr.domains.shared.AggregateRoot;
import br.com.vr.domains.shared.Event;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBAttribute;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBAutoGeneratedKey;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBHashKey;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBTable;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.google.gson.Gson;
import lombok.*;
import org.springframework.data.annotation.Id;
import javax.validation.constraints.NotNull;
import java.util.ArrayList;
import java.util.List;

@DynamoDBTable(tableName = "PurchaseCard")
@Getter
@AllArgsConstructor
@NoArgsConstructor
@Builder
public class PurchaseCard extends AggregateRoot {

    @Id
    @Setter
    @DynamoDBHashKey(attributeName = "purchaseCardId")
    @JsonProperty(value = "purchaseCardId")
    @DynamoDBAutoGeneratedKey
    @NotNull
    private String purchaseCardId;

    @Setter
    @DynamoDBAttribute(attributeName = "unlockPurchaseCard")
    private Boolean unlockCard;

    @Setter
    @DynamoDBAttribute(attributeName = "balance")
    private Double balance;

    @Setter
    @DynamoDBAttribute(attributeName = "cnpj")
    private String cnpj;

    @Setter
    @DynamoDBAttribute(attributeName = "purchaseCardType")
    private String purchaseCardType;

    @Setter
    @DynamoDBAttribute(attributeName = "category")
    private String category;

    @Setter
    @DynamoDBAttribute(attributeName = "cashBack")
    private Integer cashBack;

    @Setter
    @DynamoDBAttribute(attributeName = "pat")
    private Boolean pat;

    @Setter
    @DynamoDBAttribute(attributeName = "transactions")
    @Builder.Default
    private ArrayList<Transaction> transactions = new ArrayList<>();

    @Setter
    @DynamoDBAttribute(attributeName = "events")
    @Builder.Default
    private List<String> events = new ArrayList<>();

    protected void apply(Event event) {
        final Gson gson = new Gson();

        if (event instanceof CreatedPurchaseCardEvent) {
            events.add(gson.toJson(event));
        }
        else if (event instanceof UnlockedCardEvent) {
            events.add(gson.toJson(event));
        }
    }

    private void createdPurchaseCard(CreatedPurchaseCardEvent createdPurchaseCardEvent) {
        apply(createdPurchaseCardEvent);
    }

    public void createPurchaseCard() {
        createdPurchaseCard(
                CreatedPurchaseCardEvent.builder()
                .purchaseCardId(this.purchaseCardId)
                .unlockCard(this.unlockCard)
                .balance(this.balance)
                .cnpj(this.cnpj)
                .purchaseCardType(this.purchaseCardType)
                .category(this.category)
                .cashBack(this.cashBack)
                .pat(this.pat)
                .transactions(this.transactions)
                .build()
        );
    }

    private void unlockedPurchaseCard(UnlockedCardEvent unlockedCardEvent){
        apply(unlockedCardEvent);
    }

    public void unlockPurchaseCard(UnlockPurchaseCardCommand unlockPurchaseCardCommand, KenanService kenanService){
        this.unlockCard = unlockPurchaseCardCommand.getUnlockValue();
        kenanService.unlockPurchaseCard(unlockPurchaseCardCommand.getPurchaseCardId(), unlockPurchaseCardCommand.getUnlockValue());
        unlockedPurchaseCard(
                UnlockedCardEvent
                        .builder()
                        .purchaseCardId(unlockPurchaseCardCommand.getPurchaseCardId())
                        .unlockCard(unlockPurchaseCardCommand.getUnlockValue()).build()
        );
    }

    public void extractPurchaseCard(ExtractPurchaseCardCommand extractPurchaseCardCommand, KenanService kenanService){
        kenanService.extractPurchaseCard(extractPurchaseCardCommand.getPurchaseCardId(), extractPurchaseCardCommand.getDays());
    }

}
